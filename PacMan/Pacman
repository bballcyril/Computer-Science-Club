int x = 100;
int y = 35;
int d = 15;
int r = d/2;
int linesY = 6;
int linesX = 5;
float multiplier = 1.5;
float lane = height/multiplier;
float pt1 = radians(50); float pt2 = radians(310);
//float pt1 = radians(50); float pt2 = radians(310);
//float pt3 = radians(140); float pt4 = radians(400);
int counter = 0;
boolean closeMouth;
boolean noWallX1 = true;
boolean noWallX2 = true;
boolean noWallY1 = true;
boolean noWallY2 = true;
int numBoxesW;
int numBoxesH;
int lineCounter1;
int lineCounter2;
float[] linesW;
float[] linesH;
float boxHeight;
float boxWidth;
float boxStartX;
float boxStartY;
float betwX;
float betwY;

boolean isDown; boolean isUp; boolean isLeft; boolean isRight;

void setup(){
  size(1000, 1000);
}

void draw(){ 
   background(0);
  frameRate(120);
  lineCounter1 = 0;
  lineCounter2 = 0;
  numBoxesW = 26;//dimensions
  numBoxesH = 32;//dimensions
  linesW = new float[numBoxesW+1];
  linesH = new float[numBoxesH+1];
  boxStartY = 20;
  boxStartX = 20;
  boxHeight = 500;
  boxWidth = 600;
  betwX = boxWidth/numBoxesW;
  betwY = boxHeight/numBoxesH;
  if(x == boxStartX+r){
    noWallX1 = false;
  }
  if(x == boxStartX+boxWidth-r){
    noWallX2 = false; 
  }
  if(y == boxStartY+r){
    noWallY1 = false; 
  }
  if(y == boxStartY+boxHeight-r){
    noWallY2 = false; 
  }
  if(x == d/2){
     noWallX1 = false; 
  }
  if(x == width-d/2){
     noWallX2 = false; 
  }
  if(y == d/2){
     noWallY1 = false; 
  }
  if(y == height-d/2){
     noWallY2 = false; 
  }
    counter++;
    if(counter < 60){
       pt1 -= radians(1);
       pt2 += radians(1);
    }else if(counter > 60 && counter < 120){
       pt1 += radians(1);
       pt2 -= radians(1);
    }else if(counter > 120){
       counter = 0; 
    }
//    print(counter);
    fill(255, 255, 0);
    noStroke();
  arc(x, y, d, d, pt1, pt2);
 if(keyPressed){
  if(keyCode == LEFT){
    isLeft = true; isRight = false; isUp = false; isDown = false;
    pt1 = radians(230); pt2 = radians(490); counter = 0;
  }
  if(keyCode == RIGHT){
    isLeft = false; isRight = true; isUp = false; isDown = false;
    pt1 = radians(50); pt2 = radians(310); counter = 0;
  }
  if(keyCode == UP){
    isLeft = false; isRight = false; isUp = true; isDown = false;
    pt1 = radians(320); pt2 = radians(580); counter = 0;
  }
  if(keyCode == DOWN){
    isLeft = false; isRight = false; isUp = false; isDown = true;
    pt1 = radians(140); pt2 = radians(400); counter = 0;
  }
 }
 if(isLeft && noWallX1){
    x--; 
 }
 if(isRight && noWallX2){
    x++; 
 }
 if(isUp && noWallY1){
    y--; 
 }
 if(isDown && noWallY2){
    y++; 
 }
 if(!noWallX1){
   x++;
   noWallX1 = true;
 }
  if(!noWallX2){
   x--;
   noWallX2 = true;
 }
  if(!noWallY1){
   y++;
   noWallY1 = true;
 }
  if(!noWallY2){
   y--;
   noWallY2 = true;
 }
 stroke(255, 0, 0);
 strokeWeight(2);

for(float i = boxStartY;i <= boxHeight+boxStartY;i+=betwY){ //Y
  line(boxStartX, i, boxWidth+boxStartX, i);
  linesH[lineCounter1] = i;
  lineCounter1++;
  
}
for(float f = boxStartX;f <= boxWidth+boxStartX;f+=betwX){ //X
  line(f, boxStartY, f, boxHeight+boxStartY);
  linesW[lineCounter2] = f;
  lineCounter2++;
}
  fill(0,255, 0);
  noStroke();
  walls(0, 0, 2, 2);
  
}

void walls(int x, int y, int numX, int numY){
  rect(linesW[x], linesH[y], betwX*numX, betwY*numY);
  
}
